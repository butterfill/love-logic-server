template(name='courses')
  h2 Select a course
  if Template.subscriptionsReady 
    ul.collection
      each courses
        li.collection-item
          a(href="/course/#{name}") #{name}
          span --- #{description}
    if isInstructorOrTutor
      p: a.createNewCourse.btn.waves-effect.grey create a new course
        
  else
    +loading

template(name='createNewCourseModal')
  p Courses are visible to everyone: the course name will be prefixed by your email domain (e.g. ‘uk.ac.warwick:’).
  .input-field
    input#courseName(type="text", name="name")
    label(for='courseName') The short name of the course (no spaces).
  .input-field
    textarea#courseDescription.materialize-textarea(type="text", name="description")
    label(for='courseDescription') A description of this course.  


template(name='courseNameHeader')
  if Template.subscriptionsReady 
    p 
      a(href='/course/#{courseName}') #{courseName} 
      span --- #{courseDescription}


template(name='exerciseSetsForCourse')
  if Template.subscriptionsReady 
    p 
      a(href='/courses') ALL COURSES
      span  > #{courseName} 
      span --- #{courseDescription}
    if canDeleteCourse
      p: a.deleteCourse.btn.waves-effect.red-text.grey delete this course
  
  if exerciseSets
    h2 Select an exercise set
  if Template.subscriptionsReady 
    ul.collection
      each exerciseSets
        li.collection-item
          a(href="/course/#{courseName}/exerciseSet/#{variant}") #{variant}
          span --- #{description}
    if isInstructorOrTutor
      p: a.createNewExerciseSet.btn.waves-effect.grey create a new exercise set
  else
    +loading
  
template(name='createNewExerciseSetModal')
  .input-field
    input#variantName(type="text", name="variant")
    label(for='variantName') The short name of the exercise set (no spaces).
  .input-field
    textarea#variantDescription.materialize-textarea(type="text", name="description")
    label(for='variantDescription') Who is this course for?  A brief description


//- displays only the questions for a lecture or unit
template(name='listExercises')
  if Template.subscriptionsReady
    p #{courseName} --- #{courseDescription}
    h2 #{exerciseSetName}
  
    each lectures
      h4(id="#{htmlAnchor}") #{name}
      each units
        h5(id="#{htmlAnchor}") #{idx}. #{name}
        if reading
          p Reading: #{reading}
        ul.collection
          each exercises
            li.collection-item
              span #{unitIdx}.#{idx} 
              a(href="#{link}?variant=#{exerciseSetName}&courseName=#{courseName}&lectureName=#{../../name}&unitName=#{../name}") #{name}
              +Template.dynamic(template=displayQuestion)
  else
    +loading





template(name='slidesAndHandoutsLinks')
  if slides
    span [
    a(href="#{slides}", target="_blank") slides
    span ] 
  if handout
    span  [
    a(href="#{handout}", target="_blank") handout
    span ] 

template(name='slidesAndHandoutsLinksEditable')
  span [
  if slides
    a(href="#{slides}", target="_blank") slides
    a.editSlides.waves-effect 
      i.material-icons mode_edit
  else
    span add link to slides
    a.editSlides.waves-effect 
      i.material-icons add_circle_outline
  span ] 
  span  [
  if handout
    a(href="#{handout}", target="_blank") handout
    a.editHandout.waves-effect 
      i.material-icons mode_edit
  else
    span add link to handout
    a.editHandout.waves-effect 
      i.material-icons add_circle_outline
  span ] 



template(name='exerciseSet')
  if exerciseSetReady
    +courseNameHeader(courseName=courseName courseDescription=courseDescription)
  
    h2 
      if isForTutee
        span #{tuteeName} &lsaquo;#{tuteeEmail}&rsaquo;
        br
      if paramsSpecifyLecture
        a(href="/course/#{courseName}/exerciseSet/#{exerciseSetName}") #{exerciseSetName}
      else
        span #{exerciseSetName}
    unless paramsSpecifyLecture
      p #{exerciseSetDescription}
      if userIsExerciseSetOwner
        p: a.btn.waves-effect.grey(href="/course/#{courseName}/exerciseSet/#{exerciseSetName}/edit") edit
  
  h4 Progress with 
    if paramsSpecifyUnit
      | #{unitName}
    if paramsSpecifyLecture
      if paramsSpecifyUnit
        each lectures
          span  (
          a(href="#{exerciseSetLectureURL}") #{lectureName}
          span )
      else
        span.lectureName #{lectureName} 
      if exerciseSetReady
        if isTutor
          each lectures
            a(href="#{listExercisesURL}") [list questions]
    else
      | all exercises
    
  if exerciseSetReady
    if paramsSpecifyLecture
      each lectures
        p
          +slidesAndHandoutsLinks    
    
  if Template.subscriptionsReady
    table.centered
      thead
        tr
          th Number submitted
          th correct
          th incorrect
          th ungraded
      tbody
        tr
          td all time
          td #{lectures.stats.submitted} of #{lectures.stats.nofExercises}
          td #{lectures.stats.correct}
          td #{lectures.stats.incorrect}
          td #{lectures.stats.ungraded}
        tr
          td last 7 days
          td #{lectures.stats.lastNDays.submitted} 
          td #{lectures.stats.lastNDays.correct}
          td #{lectures.stats.lastNDays.incorrect}
          td #{lectures.stats.lastNDays.ungraded}
  else
    +loading
  
  #progressChart
    
  if isForTutee
    .pass
  else
    if Template.subscriptionsReady
      if isAlreadyFollowing
        a#unfollow.btn.waves-effect.grey stop following ‘#{exerciseSetName}’
      else
        a#follow.btn.waves-effect.grey follow ‘#{exerciseSetName}’

  if Template.subscriptionsReady
    if exerciseSetReady
      if paramsSpecifyLecture  
        each lectures
          each units
            p.vspace &nbsp;
            h5(id="#{htmlAnchor}") 
              //- unless paramsSpecifyUnit
              //-   span #{idx}.
              a(href="#{exerciseSetUnitURL}") #{name}
            if reading
              p Reading: #{reading}
            p 
              +slidesAndHandoutsLinks    
            //- div(style="padding-left:2em;border-left:1px dotted black")
            ul.collection
              each exercises
                li.collection-item
                  if exerciseIsCorrect
                    span.green-text ✔ 
                  if exerciseIsIncorrect
                    span.red-text ✘
                  if exerciseIsUngraded
                    span.orange.white-text(style="font-weight:bold;border-radius:16px;padding-left:3px;padding-right:2px;") ?
                  //- if isSubmitted
                  //-   span.pass
                  //- else
                  //-   span.black-text ✪
                  span #{unitIdx}.#{idx} 
                  if isForTutee
                    a(href="#{gradeURL}?variant=#{exerciseSetName}&courseName=#{courseName}&lectureName=#{../../name}&unitName=#{../name}&user=#{tuteeId}") #{name}
                  else
                    a(href="#{link}?variant=#{exerciseSetName}&courseName=#{courseName}&lectureName=#{../../name}&unitName=#{../name}") #{name}
                  if isSubmitted
                    span.grey-text [submitted #{dateSubmitted}]
                  else
                    span.red-text [todo]
                  
      else
        p Select a lecture to view exercises:
        ul.collection
          each lectures
            li.collection-item(id="#{htmlAnchor}")
              a(href="#{exerciseSetLectureURL}") #{name} 
              span --- #{progress.todo} todo (of #{progress.total} in total)
              if progress.correct
                span , 
                span.green-text ✔#{progress.correct}
              if progress.incorrect
                span , 
                span.red-text ✘#{progress.incorrect}
              if progress.ungraded
                span , 
                span.orange.white-text(style="font-weight:bold;border-radius:16px;padding-left:3px;padding-right:2px;") ?#{progress.ungraded}

  else
    +loading


template(name='exerciseSetEdit')
  if Template.subscriptionsReady
    +courseNameHeader(courseName=courseName courseDescription=courseDescription)
    h2 
      if paramsSpecifyLecture
        a(href="/course/#{courseName}/exerciseSet/#{exerciseSetName}/edit") #{exerciseSetName}
      else
        span.exerciseSetName(contentEditable="true") #{exerciseSetName}
        i.material-icons mode_edit
    unless paramsSpecifyLecture
      p 
        span.exerciseSetDescription(contentEditable="true") 
          if exerciseSetDescription
            | #{exerciseSetDescription}
          else
            | [describe this exercise set here]
        i.material-icons mode_edit
      p
        span.textbook(contentEditable="true") 
          if textbook
            | #{textbook}
          else
            | [specify the textbook here]
        i.material-icons mode_edit
      if canDeleteExerciseSet
        p: a.deleteExerciseSet.btn.waves-effect.red-text.grey delete this exercise set
      
        
    if exerciseSetReady
      h4 
        if paramsSpecifyUnit
          each lectures
            each units
              span.unitName(contentEditable="true") #{name}
              i.material-icons mode_edit
        if paramsSpecifyLecture
          if paramsSpecifyUnit
            each lectures
              span  (
              each units
                span Unit §#{idx} of 
              a(href="#{exerciseSetLectureURL}") #{lectureName}
              span )
          else
            each lectures
              span.lectureName(contentEditable="true") #{name} 
              i.material-icons mode_edit
        else
          | all lectures
    
      if paramsSpecifyLecture
        each lectures
          unless paramsSpecifyUnit
            p
              +slidesAndHandoutsLinksEditable
    
      //- list units
      if paramsSpecifyLecture  
        unless paramsSpecifyUnit
          each lectures   
            p: a.addUnit.waves-effect
              i.material-icons add_circle_outline
              span add a unit 
              if units
                span to the end of the list of units
        each lectures
          each units
            p.vspace &nbsp;
            h5(id="#{htmlAnchor}") 
              if paramsSpecifyUnit
                #{name}
              else
                unless isFirst
                  a.moveUnitUp.waves-effect
                    i.material-icons arrow_upward
                else
                  i.material-icons.grey-text arrow_upward
                unless isLast
                  a.moveUnitDown.waves-effect 
                    i.material-icons arrow_downward
                else
                  i.material-icons.grey-text arrow_downward
                a.deleteUnit.waves-effect 
                  i.material-icons delete
                span(style="width:1em;") &nbsp;
                a(href="#{exerciseSetUnitURL}") #{name}
            p Reading: 
              if reading
                span #{reading}
              else
                span [none set]
              if paramsSpecifyUnit
                if reading
                  a.editReading.waves-effect 
                    i.material-icons mode_edit
                else
                  a.editReading.waves-effect 
                    i.material-icons add_circle_outline
                
            p 
              if paramsSpecifyUnit
                +slidesAndHandoutsLinksEditable
                p: a.addExerciseUsingExerciseBuilder.waves-effect
                  i.material-icons add_circle_outline
                  span add an exercise 
                  if exercises
                    span to the end of the list of exercises
                
                
              else
                +slidesAndHandoutsLinks
            ul.collection
              each exercises
                li.collection-item
                  if paramsSpecifyUnit
                    unless isFirst
                      a.moveExerciseUp.waves-effect 
                        i.material-icons arrow_upward
                    else
                      i.material-icons.grey-text arrow_upward
                    unless isLast
                      a.moveExerciseDown.waves-effect 
                        i.material-icons arrow_downward
                    else
                      i.material-icons.grey-text arrow_downward
                  span #{unitIdx}.#{idx} 
                  a(href="#{link}?variant=#{exerciseSetName}&courseName=#{courseName}&lectureName=#{../../name}&unitName=#{../name}") #{name}
                  if paramsSpecifyUnit
                    a.editExerciseUsingExerciseBuilder.waves-effect 
                      i.material-icons mode_edit
                  
                  
      else
        p: a.addLecture.waves-effect
          i.material-icons add_circle_outline
          span add a lecture 
          if lectures
            span to the end of the list of lectures
        p Select a lecture to edit units and exercises:
        ul.collection
          each lectures
            li.collection-item(id="#{htmlAnchor}")
              a.deleteLecture.waves-effect(data-lectureIdx="#{idx}")
                i.material-icons delete
              unless isFirst
                a.moveLectureUp.waves-effect
                  i.material-icons arrow_upward
              else
                i.material-icons.grey-text arrow_upward
              unless isLast
                a.moveLectureDown.waves-effect 
                  i.material-icons arrow_downward
              else
                i.material-icons.grey-text arrow_downward
              span(style="width:1em;") &nbsp;
              a(href="#{exerciseSetLectureURL}") #{name} 

  else
    +loading

template(name="urlModal")
  p #{message}.
  .input-field
    input.url(type="text", value="#{url}", name="url")
    
template(name="exerciseModal")
  p Specify an exercise
  .input-field
    input(type="text", value="#{exercise}", name="exercise")
