template(name='courses')
  h2 Select a course
  if Template.subscriptionsReady 
    if isInstructorOrTutor
      p: a.createNewCourse.btn-flat.hint--bottom(data-hint="create a new course")
        i.material-icons add_circle_outline
    ul.collection
      each courses
        li.collection-item
          a(href="/course/#{name}") #{name}
          span --- #{description}
      
        
  else
    +loading

template(name='createNewCourseModal')
  p Courses are visible to everyone: the course name will be prefixed by your email domain (e.g. ‘uk.ac.warwick:’).
  .input-field
    input#courseName(type="text", name="name")
    label(for='courseName') The short name of the course (no spaces).
  .input-field
    textarea#courseDescription.materialize-textarea(type="text", name="description")
    label(for='courseDescription') A description of this course.  


template(name='courseNameHeader')
  if Template.subscriptionsReady 
    p 
      a(href='/course/#{courseName}') #{courseName} 
      span --- #{courseDescription}


template(name='exerciseSetsForCourse')
  if Template.subscriptionsReady 
    p 
      a(href='/courses') ALL COURSES
      span  > #{courseName} 
      span --- #{courseDescription}
    if canDeleteCourse
      p: a.deleteCourse.btn-flat.red-text.hint-bottom(data-hint="delete this course")
        i.material-icons delete
  
  if exerciseSets
    h2 Select an exercise set
  if Template.subscriptionsReady 
    ul.collection
      each exerciseSets
        li.collection-item
          a(href="/course/#{courseName}/exerciseSet/#{variant}") #{variant}
          span --- #{description}
    p
      if isInstructorOrTutor
        a.createNewExerciseSet.btn-flat.hint--bottom(data-hint="create a new exercise set")
          i.material-icons add_circle_outline
      if clipboardHasExerciseSet
        a.pasteExerciseSet.btn-flat.hint--bottom(data-hint="paste exercise set from clipboard")
          i.material-icons content_paste
      
  else
    +loading
  
  
template(name='createNewExerciseSetModal')
  .input-field
    input#variantName(type="text", name="variant")
    label(for='variantName') The short name of the exercise set (no spaces).
  .input-field
    textarea#variantDescription.materialize-textarea(type="text", name="description")
    label(for='variantDescription') Who is this course for?  A brief description


//- displays only the questions for a lecture or unit
template(name='listExercises')
  if Template.subscriptionsReady
    p #{courseName} --- #{courseDescription}
    h2 #{exerciseSetName}
  
    each lectures
      h4(id="#{htmlAnchor}") #{name}
      each units
        h5(id="#{htmlAnchor}") #{idx}. #{name}
        if reading
          p Reading: #{reading}
        ul.collection
          each exercises
            li.collection-item
              span #{unitIdx}.#{idx} 
              a(href="#{link}?variant=#{exerciseSetName}&courseName=#{courseName}&lectureName=#{../../name}&unitName=#{../name}") #{name}
              +Template.dynamic(template=displayQuestion)
  else
    +loading





template(name='slidesAndHandoutsLinks')
  if slides
    span [
    a(href="#{slides}", target="_blank") slides
    span ] 
  if handout
    span  [
    a(href="#{handout}", target="_blank") handout
    span ] 


template(name='slidesAndHandoutsLinksEditable')
  span [
  if slides
    a(href="#{slides}", target="_blank") slides
    a.editSlides.waves-effect 
      i.material-icons mode_edit
  else
    span link to slides
    a.editSlides.waves-effect 
      i.material-icons mode_edit
      //- i.material-icons add_circle_outline
  span ] 
  span  [
  if handout
    a(href="#{handout}", target="_blank") handout
    a.editHandout.waves-effect 
      i.material-icons mode_edit
  else
    span link to handout
    a.editHandout.waves-effect 
      i.material-icons mode_edit
      //- i.material-icons add_circle_outline
  span ] 


template(name="deleteCopyPasteButtons")
  //- Buttons to delete and copy exercise set, or paste lecture
  //- Only shown when showing all lectures
  unless paramsSpecifyLecture
    if isEditing
      if canDeleteExerciseSet
        a.deleteExerciseSet.btn-flat.red-text.hint--bottom(data-hint="delete this exercise set") 
          i.material-icons delete
    a.copyExerciseSet.btn-flat.hint--bottom(data-hint="copy this exercise set to clipboard")
      i.material-icons.wide content_copy
    if isEditing
      if clipboardHasLecture
        a.pasteLecture.btn-flat.hint--bottom(data-hint="paste lecture from clipboard") 
          i.material-icons content_paste

  //- Buttons to copy or paste lecture or unit
  if paramsSpecifyLecture
    each lectures
      unless paramsSpecifyUnit
        a.copyLecture.btn-flat.hint--bottom(data-hint="copy this lecture to clipboard")  
          i.material-icons content_copy
          //- span copy this lecture to clipboard
        if isEditing
          if clipboardHasUnit
            a.pasteUnit.btn-flat.hint--bottom(data-hint="paste unit from clipboard")  
              i.material-icons content_paste
      if paramsSpecifyUnit
        each units 
          a.copyUnit.btn-flat.hint--bottom(data-hint="copy this unit to clipboard")  
            i.material-icons content_copy


template(name='exerciseSet')
  if Template.subscriptionsReady
    if exerciseSetReady
      if exerciseSetExists
        +exerciseSetInner
      else
        h2 This exercise set
        p does not exist.
        p Maybe its owner deleted it?
    else
      +loading
  else
    +loading


template(name='exerciseSetInner')
  +courseNameHeader(courseName=courseName courseDescription=courseDescription)

  h2 
    if isForTutee
      span #{tuteeName} &lsaquo;#{tuteeEmail}&rsaquo;
      br
    if paramsSpecifyLecture
      a(href="/course/#{courseName}/exerciseSet/#{exerciseSetName}") #{exerciseSetName}
    else
      span #{exerciseSetName}
  unless paramsSpecifyLecture
    p #{exerciseSetDescription}
  
  //- buttons
  p
    unless paramsSpecifyLecture
      if userIsExerciseSetOwner
        a(href="/course/#{courseName}/exerciseSet/#{exerciseSetName}/edit", data-hint="edit this exercise set").hint--bottom.btn-flat
          i.material-icons mode_edit
    if isInstructorOrTutor
      //- This won’t actually include delete or paste because not editing:
      +deleteCopyPasteButtons lectures=lectures

  //- button to follow exercise set
  unless paramsSpecifyLecture
    unless isForTutee
      if isAlreadyFollowing
        a#unfollow.btn.waves-effect.grey stop following ‘#{exerciseSetName}’
      else
        a#follow.btn.waves-effect.grey follow ‘#{exerciseSetName}’

    
  
  h4 Progress with 
    if paramsSpecifyUnit
      | #{unitName}
    if paramsSpecifyLecture
      if paramsSpecifyUnit
        each lectures
          span  (
          a(href="#{exerciseSetLectureURL}") #{lectureName}
          span )
      else
        span.lectureName #{lectureName} 
      if exerciseSetReady
        if isTutor
          each lectures
            a(href="#{listExercisesURL}") [list questions]
    else
      | all exercises
    
  if paramsSpecifyLecture
    each lectures
      p
        +slidesAndHandoutsLinks    
    
  table.centered
    thead
      tr
        th Number submitted
        th correct
        th incorrect
        th ungraded
    tbody
      tr
        td all time
        td #{lectures.stats.submitted} of #{lectures.stats.nofExercises}
        td #{lectures.stats.correct}
        td #{lectures.stats.incorrect}
        td #{lectures.stats.ungraded}
      tr
        td last 7 days
        td #{lectures.stats.lastNDays.submitted} 
        td #{lectures.stats.lastNDays.correct}
        td #{lectures.stats.lastNDays.incorrect}
        td #{lectures.stats.lastNDays.ungraded}
  
  #progressChart
    
  if paramsSpecifyLecture  
    each lectures
      each units
        p.vspace &nbsp;
        h5(id="#{htmlAnchor}") 
          //- unless paramsSpecifyUnit
          //-   span #{idx}.
          a(href="#{exerciseSetUnitURL}") #{name}
        if reading
          p Reading: #{reading}
        p 
          +slidesAndHandoutsLinks    
        //- div(style="padding-left:2em;border-left:1px dotted black")
        ul.collection
          each exercises
            li.collection-item
              if exerciseIsCorrect
                span.green-text ✔ 
              if exerciseIsIncorrect
                span.red-text ✘
              if exerciseIsUngraded
                span.orange.white-text(style="font-weight:bold;border-radius:16px;padding-left:3px;padding-right:2px;") ?
              //- if isSubmitted
              //-   span.pass
              //- else
              //-   span.black-text ✪
              span #{unitIdx}.#{idx} 
              if isForTutee
                a(href="#{gradeURL}?variant=#{exerciseSetName}&courseName=#{courseName}&lectureName=#{../../name}&unitName=#{../name}&user=#{tuteeId}") #{name}
              else
                a(href="#{link}?variant=#{exerciseSetName}&courseName=#{courseName}&lectureName=#{../../name}&unitName=#{../name}") #{name}
              if isSubmitted
                span.grey-text [submitted #{dateSubmitted}]
              else
                span.red-text [todo]
              
  unless paramsSpecifyLecture  
    p Select a lecture to view exercises:
    ul.collection
      each lectures
        li.collection-item(id="#{htmlAnchor}")
          a(href="#{exerciseSetLectureURL}") #{name} 
          span --- #{progress.todo} todo (of #{progress.total} in total)
          if progress.correct
            span , 
            span.green-text ✔#{progress.correct}
          if progress.incorrect
            span , 
            span.red-text ✘#{progress.incorrect}
          if progress.ungraded
            span , 
            span.orange.white-text(style="font-weight:bold;border-radius:16px;padding-left:3px;padding-right:2px;") ?#{progress.ungraded}



template(name='exerciseSetEdit')
  if Template.subscriptionsReady
    if exerciseSetReady
      +exerciseSetEditInner 
    else
      +loading
  else
    +loading


template(name='exerciseSetEditInner')
  +courseNameHeader(courseName=courseName courseDescription=courseDescription)
  h2 
    if paramsSpecifyLecture
      a(href="/course/#{courseName}/exerciseSet/#{exerciseSetName}/edit") #{exerciseSetName}
    else
      span.exerciseSetName(contentEditable="true") #{exerciseSetName}
      i.material-icons mode_edit

  //- Subheading if looking at a particular lecture or unit
  if paramsSpecifyLecture
    h4
      unless paramsSpecifyUnit
        //- we’re looking at a whole lecture (will eventually show all units)
        each lectures
          span.lectureName(contentEditable="true") #{name} 
          i.material-icons mode_edit
      if paramsSpecifyUnit
        each lectures
          each units
            span.unitName(contentEditable="true") #{name}
            i.material-icons mode_edit
            span  (Unit §#{idx} of 
            a(href="#{../exerciseSetLectureURL}") #{lectureName}
            span )

  //- Exercise set description, textbook etc
  //- Only shown when showing all lectures
  unless paramsSpecifyLecture
    if isHidden
      p These exercises are currently hidden from those not already following them  
        button#showExerciseSet.btn.waves-effect.grey show these exercises  
    else
      p These exercises are currently visible to all users 
        button#hideExerciseSet.btn.waves-effect.grey hide these exercises
    p 
      span.exerciseSetDescription(contentEditable="true") 
        if exerciseSetDescription
          | #{exerciseSetDescription}
        else
          | [describe this exercise set here]
      i.material-icons mode_edit
    p Dialect (syntax and rules of proof): 
      if dialectNameForExerciseSet
        | #{dialectNameForExerciseSet}
      else
        | [unspecified]
      a.editDialectExerciseSet.waves-effect 
        i.material-icons mode_edit
    p
      span.textbook(contentEditable="true") 
        if textbook
          | #{textbook}
        else
          | [specify the textbook here]
      i.material-icons mode_edit
      
  if paramsSpecifyUnit
    each lectures
      each units
        p Dialect for this unit (syntax and rules of proof): 
          if dialectName
            | #{dialectName}
          else
            | [unspecified]
          a.editDialectUnit.waves-effect 
            i.material-icons mode_edit

  //- Slide and handout links
  if paramsSpecifyLecture
    each lectures
      unless paramsSpecifyUnit
        //- This is the page for a single lecture
        p
          +slidesAndHandoutsLinksEditable 
      if paramsSpecifyUnit
        //- This is the page for a single unit
        each units
          p Reading: 
            if reading
              span #{reading}
            else
              span [none set]
            if paramsSpecifyUnit
              a.editReading.waves-effect 
                i.material-icons mode_edit
          p 
            +slidesAndHandoutsLinksEditable



  //- Buttons to add lecture, unit or exercise
  p
    unless paramsSpecifyLecture
      a.addLecture.btn-flat.hint--bottom(data-hint="add a lecture to the end of the list of lectures")
        i.material-icons add_circle_outline
    if paramsSpecifyLecture  
      each lectures   
        unless paramsSpecifyUnit
          a.addUnit.btn-flat.hint--bottom(data-hint="add a unit to the end of the list of units")
            i.material-icons add_circle_outline
        if paramsSpecifyUnit
          each units
            a.addExerciseUsingExerciseBuilder.btn-flat.hint--bottom(data-hint="add an exercise to the end of the list of exercises")
              i.material-icons add_circle_outline
    +deleteCopyPasteButtons lectures=lectures

  //- list units
  if paramsSpecifyLecture  
    each lectures
      each units
        p.vspace &nbsp;
        h5(id="#{htmlAnchor}") 
          if paramsSpecifyUnit
            #{name}
          else
            unless isFirst
              a.moveUnitUp.waves-effect
                i.material-icons arrow_upward
            else
              i.material-icons.grey-text arrow_upward
            unless isLast
              a.moveUnitDown.waves-effect 
                i.material-icons arrow_downward
            else
              i.material-icons.grey-text arrow_downward
            a.deleteUnit.waves-effect 
              i.material-icons delete
            span(style="width:1em;") &nbsp;
            a(href="#{exerciseSetUnitURL}") #{name}
          unless paramsSpecifyUnit
            +slidesAndHandoutsLinks
        ul.collection
          each exercises
            li.collection-item
              if paramsSpecifyUnit
                unless isFirst
                  a.moveExerciseUp.waves-effect 
                    i.material-icons arrow_upward
                else
                  i.material-icons.grey-text arrow_upward
                unless isLast
                  a.moveExerciseDown.waves-effect 
                    i.material-icons arrow_downward
                else
                  i.material-icons.grey-text arrow_downward
              span #{unitIdx}.#{idx} 
              a(href="#{link}?variant=#{exerciseSetName}&courseName=#{courseName}&lectureName=#{../../name}&unitName=#{../name}") #{name}
              if paramsSpecifyUnit
                a.editExerciseUsingExerciseBuilder.waves-effect 
                  i.material-icons mode_edit
              
              
  else
    p Select a lecture to edit units and exercises:
    ul.collection
      each lectures
        li.collection-item(id="#{htmlAnchor}")
          a.deleteLecture.waves-effect(data-lectureIdx="#{idx}")
            i.material-icons delete
          unless isFirst
            a.moveLectureUp.waves-effect
              i.material-icons arrow_upward
          else
            i.material-icons.grey-text arrow_upward
          unless isLast
            a.moveLectureDown.waves-effect 
              i.material-icons arrow_downward
          else
            i.material-icons.grey-text arrow_downward
          span(style="width:1em;") &nbsp;
          a(href="#{exerciseSetLectureURL}") #{name} 

template(name="urlModal")
  p !{message}
  .input-field
    input.url(type="text", value="#{url}", name="url")
    
template(name="exerciseModal")
  p Specify an exercise
  .input-field
    input(type="text", value="#{exercise}", name="exercise")

template(name="setDialectModal")
  p !{message}
  .input-field
    input.dialectName.typeahead(type="text", value="#{dialectName}", name="dialectName")
  p !{postMessage}
  div(style="min-height:250px") &nbsp;
